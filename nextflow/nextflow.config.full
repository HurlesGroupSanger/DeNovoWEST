includeConfig 'conf/lsf.conf'
includeConfig 'conf/default.conf'

///////////////////////
// CONDA - CONTAINER //
///////////////////////

conda.enabled = true

// If using singularity, uncomment the following lines and set conda.enabled to false
//process.container = '../../denovowest_3.sif'
//singularity.enabled = true
//process.container = 'delagee/denovowest:4'
//docker.enabled = true


//////////////////////
// NEXTFLOW BASEDIR //
//////////////////////

params.basedir = "test"
params.run_name = "full"

workDir = "${params.basedir}/work/${params.run_name}"
params.outdir = "${params.basedir}/out/${params.run_name}"

params {

  ///////////
  // MODES //
  ///////////
  
  create_rates = true
  annotate_dnm = true
  annotate_rates = true
  run_enrichment = true
  run_clustering = true


  ////////////
  // COMMON //
  ////////////

  
  gff = "../examples/annotation/CADD/input/OR4F5.gff"
  genome_fasta = "../examples/annotation/CADD/input/OR4F5.fa"
  dnm = "../examples/annotation/CADD/input/OR4F5_dnms.tsv"


  ////////////
  // RATES //
  ////////////

  rates_creation {
    path = "../resources/rates_model_dnn.tsv"
    model = "kmer"
  }

  ////////////////
  // ANNOTATION //
  ////////////////


  annotation {
    cadd_file="../examples/annotation/CADD/input/OR4F5.cadd.tsv.gz"
  }


  ////////////////
  // ENRICHMENT //
  ////////////////

  enrichment {

    nmales = 17422
    nfemales = 13636

    score = "score"
    runtype = "both"

  }


  ////////////////
  // CLUSTERING //
  ////////////////

  clustering {

    // Clustering runtype can be '3D', 'linear' or 'both'
    runtype = "both"
    protein_structures = "/lustre/scratch125/humgen/projects_v2/denovowest/scratch/resources/UP000005640_9606_HUMAN_v4.tar"

  }


  //////////////
  // BCFTOOLS //
  //////////////

  // If bcftools and tabix are not in your PATH but can be accessed via modules
  // add the module names here (not needed when using containers)

  useModules = true 
  bcftoolsModule = 'HGI/softpack/groups/hgi/bcftools1.20/1'
  tabixModule = 'badger/samtools/1.20'


}

///////////
// TRACE //
///////////

params.tracedir = "${params.basedir}/trace/${params.run_name}"
Date now = new Date()
params.timestamp = now.format("yyyyMMdd-HH-mm-ss")

timeline {
    enabled = true
    file = "${params.tracedir}/${params.timestamp}_timeline.html"
}
report {
    enabled = true
    file = "${params.tracedir}/${params.timestamp}_report.html"
}



