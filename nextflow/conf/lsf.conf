
// Point to conda environment directory
def condaEnvsLocation = 'which conda'.execute().text.replace("/bin/conda", "/envs").trim()

// Maximum requirements for all processes
max_requirements {
  max_memory = '128.GB'
  max_cpus = 16
  max_time = '240.h'
}



process {

    conda = condaEnvsLocation + '/denovowest'

    // LSF sanger
    executor = 'lsf'
    clusterOptions = '-G "team29-grp"'

    // Requirements for default process
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 5.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    // Error handling
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Requirements for long running processes
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) }
        queue = 'long'
    }

}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(max_requirements.max_memory as nextflow.util.MemoryUnit) == 1)
                return max_requirements.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${max_requirements.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(max_requirements.max_time as nextflow.util.Duration) == 1)
                return max_requirements.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${max_requirements.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, max_requirements.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${max_requirements.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}